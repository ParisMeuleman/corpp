<pre class='metadata'>
Title: COÖP (or: How I Learned to Stop Worrying and Love Cross-Origin Side-Channels)
Shortname: coöp
Level: 1
Status: DREAM
Editor: Mike West 56384, Google Inc., mkwst@google.com
Markup Shorthands: markdown yes
!Version History: <a href="[REPOSITORYURL]">[REPOSITORY]</a>
Issue Tracking: whatwg/html topic: cross-origin-embedder-policy https://github.com/whatwg/html/labels/topic%3A%20cross-origin-embedder-policy
Boilerplate: repository-issue-tracking off
Abstract:
    In order to support interesting and powerful APIs in a post-Spectre world, it seems necessary
    to ensure that resoures are only voluntarily embedded into a potentially-dangerous context.
    This document outlines two opt-in mechanisms which, together, should give user agents the
    ability to load cross-origin resources into a context that exposes APIs which increase the risk
    of side-channel attacks.

    This document consists of a series of monkey-patches against HTML and Fetch which are intended
    for upstreaming once the design is settled.
</pre>
<pre boilerplate="copyright">&copy;2019, Google, Inc. All rights reserved.</pre>

<pre class="biblio">
{
  "spectre": {
    "authors": [
      "Paul Kocher", "Jann Horn", "Anders Fogh", "Daniel Genkin", "Daniel Gruss", "Werner Haas", "Mike Hamburg", "Moritz Lipp", "Stefan Mangard", "Thomas Prescher", "Michael Schwarz", "Yuval Yarom"
    ],
    "href": "https://spectreattack.com/spectre.pdf",
    "title": "Spectre Attacks: Exploiting Speculative Execution"
  },

  "chromium-post-spectre-rethink": {
    "authors": [ "The Chromium Project" ],
    "href": "https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md",
    "title": "Post-Spectre Threat Model Re-Think"
  },

  "I-D.ietf-httpbis-header-structure": {
    "authors": [ "Mark Nottingham", "Poul-Henning Kamp" ],
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-header-structure",
    "title": "Structured Headers for HTTP",
    "status": "ID",
    "publisher": "IETF"
  }
}
</pre>

<pre class="anchors">
urlPrefix: https://tc39.es/ecma262/; spec: ECMAScript
    text: SharedArrayBuffer; type: interface; url: sec-sharedarraybuffer-objects
urlPrefix: https://tools.ietf.org/html/draft-ietf-httpbis-header-structure; spec: I-D.ietf-httpbis-header-structure
    type: dfn
        text: structured header; url: #
    for: structured header
        type: dfn
            text: dictionary; url: #section-3.2
            text: token; url: #section-3.3.4
            text: boolean; url: #section-3.3.6
            text: item; url: #section-3.3
            text: parameter; url: #section-3.1.2
    type: grammar
        text: sh-dictionary; url: #section-3.2
        text: sh-token; url: #section-3.3.4
        text: sh-item; url: #section-3.3
    type: abstract-op
        text: serialize Structured Header; url: #section-4.1
        text: Structured Header parsing algorithm; url: #section-4.2
urlPrefix: https://html.spec.whatwg.org/
    type: dfn
        text: top-level browsing context group; url: multipage/browsers.html#tlbc-group
    type: abstract-op
        text: initialize the Document object; url: multipage/browsing-the-web.html#initialise-the-document-object
        text: create a new browsing context; url: multipage/browsers.html#creating-a-new-browsing-context
        text: run a worker; url: multipage/workers.html#run-a-worker
        text: process a navigate response; url: multipage/browsing-the-web.html#process-a-navigate-response
</pre>

<pre class="link-defaults">
spec:fetch; type:dfn; for:/; text:cross-origin resource policy check
spec:fetch; type:dfn; for:/; text:request
spec:fetch; type:dfn; for:/; text:response
spec:fetch; type:dfn; text: cors check
spec:html; type:dfn; for:/; text:browsing context
spec:html; type:dfn; for:/; text:global object
spec:html; type:dfn; text:browsing context group
spec:html; type:dfn; text:environment
spec:html; type:element; text:script
spec:infra; type:dfn; text:string
spec:infra; type:dfn; text:struct
spec:url; type:dfn; for:/; text:url
</pre>

Introduction {#intro}
=====================

The same-origin policy's restrictions against direct access to another origin's resources is,
unfortunately, insufficient in the face of speculative execution attacks such as Spectre [[spectre]]. Merely
_loading_ another origins' resource may be enough to bring its content into a memory space which
may be probed by an attacker, even if the browser would otherwise prevent access to the resource
through explicit channels. Similarly, _navigating to_ another origin's resources in a new window
(via `window.open()`, for instance) might bring its content into an attacker's memory space.

Given this context, user agents are rethinking the threat model under which they operate (e.g.
[[chromium-post-spectre-rethink]]). It would be unfortunate indeed to prevent the web platform from
legitimately using APIs like {{SharedArrayBuffer}} that accidentally improve attackers' ability to
exploit speculation attacks. At the same time, however, many user agents have agreed that it seems
unreasonable to enable those APIs without additional mitigation.

This document proposes a bifurcated approach to these and related problems:

1.  It introduces `Cross-Origin-Embedder-Policy`, which layers on top of the existing
    <a http-header>`Cross-Origin-Resource-Policy`</a> mechanism to give developers the ability to
    require an explicit opt-in from any resource which would be embedded in a given context they
    control. This has the effect of ensuring that any accidental exposure of an origin's data to
    a cross-origin process is consistent with the ways in which the resource is expected to be
    used, and that the resource's owner has affirmatively opted-into the risks associated with
    potential exposure. This mechanism is described in [[#section-embedder-policy]].

2.  It introduces `Cross-Origin-Opener-Policy`, which gives developers the ability to ensure that
    a given document will not share a [=browsing context group=] with a cross-origin document. This
    indirectly ensures that any `opener` relationship is severed, and has implications for
    cross-document communication mechanisms generally. By shutting down these channels, it aims to
    give user agents the ability to safely place the document into a process distinct from that of
    its opener. This mechanism is described in [[#section-opener-policy]].

Together, the assertions made via these two mechanims seem to be both necessary and sufficient
conditions for access to interesting APIs (like the aforementioned {{SharedArrayBuffer}}). The
remainder of this document will introduce the two mechanisms separately, and then point to the
places in HTML and Fetch where the mechanisms dovetail into web-visible effects on API exposure.

Embedder Policy {#section-embedder-policy}
===============

The Embedder Policy portion of this proposal aims to ensure that a resource must opt-into the risks
associated with being loaded directly (via <{img}> or <{script}>, for instance) into a cross-origin
context that might be capable of exploiting side-channels to gain access to that resources'
(meta-)data. At a high-level, the story is this:

1.  We lean on the existing <a http-header>`Cross-Origin-Resource-Policy`</a> header as the way in
    which a given resource expresses its embedding preferences. The existing `same-origin` and
    `same-site` policy values confine a resource to its own [=/origin=] or [=host/same site|site=],
    respectively. We introduce a new `cross-origin` policy value to explicitly widen a resource's
    embeddability to cross-origin contexts.

2.  We introduce a new `Cross-Origin-Embedder-Policy` header which asks the user agent to ensure
    that cross-origin responses either explicitly assert the new `cross-origin`
    <a http-header>`Cross-Origin-Resource-Policy`</a>, or that they pass a [=CORS check=]. Either
    mechanism seems sufficient as an expression of the resource owner's intent (in particular, note
    that direct access to a resource's content via CORS is a superset of the embedding capability
    we're concerned with here).

3.  We extend <a http-header>`Cross-Origin-Resource-Policy`</a> to handle some <a>navigation
    requests</a> in order to be able to apply the `Cross-Origin-Embedder-Policy` with respect to
    embeddings via <{iframe}> and <{frame}>, as well as {{Window/open|window.open()}}.


The `Cross-Origin-Embedder-Policy` HTTP Response Header {#COEP}
----------------------------------------------------------------

The <dfn http-header>`Cross-Origin-Embedder-Policy`</dfn> HTTP response header field allows a
server to declare an embedder policy for a given document. It is a [=Structured Header=] whose
value MUST be a [=structured header/token=]. [[!I-D.ietf-httpbis-header-structure]] Its ABNF is:

```
Cross-Origin-Embedder-Policy = sh-token
```

The only currently valid `Cross-Origin-Embedder-Policy` value is "`require-corp`".

In order to support forward-compatibility with as-yet-unknown request types, user agents MUST ignore
this header if it contains an invalid value. Likewise, user agents MUST ignore this header if the
value cannot be parsed as a <a grammar>`sh-token`</a>.


### Parsing ### {#COEP-parsing}

<div algorithm="parsing the COEP header">
To <dfn abstract-op local-lt="parse COEP header">obtain a response's embedder policy</dfn> given a
[=response=] (|response|):

1.  Let |policy| be "`none`".

2.  Let |header| be the result of [=header list/getting=] `Cross-Origin-Embedder-Policy` from
    |response|'s [=response/header list=].

3.  If |header| is not `null`:

    1.  Let |parsed policy| be the result of executing the [$Structured Header parsing algorithm$]
        with <var ignore>input_bytes</var> set to |header|, and <var ignore>header_type</var> set
        to "`item`".

        If parsing fails, set |parsed policy| to "`none`".

    3.  If |parsed policy| is "`require-corp`", set |policy| to "`require-corp`".

4.  Return |policy|.

<div class="note">
Note: This fails open (by defaulting to "`none`") in the presence of a header that cannot be
parsed as a [=structured header/token=]. This includes inadvertant lists created by combining
multiple instances of the `Cross-Origin-Embedder-Policy` header present in a given response:

<table class="data">
  <thead>
    <tr>
      <th>`Cross-Origin-Embedder-Policy`</th>
      <th>Final Policy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>No header delivered</em></td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`require-corp`</td>
      <td>`require-corp`</td>
    </tr>
    <tr>
      <td>`unknown-value`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`require-corp, unknown-value`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`unknown-value, unknown-value`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`unknown-value, require-corp`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`require-corp, require-corp`</td>
      <td>`none`</td>
    </tr>
  </tbody>
</table>
</div>
</div>


Integration with HTML {#COEP-integration-html}
-----------------------------------------

When creating a document, user agents will process
<a http-header>`Cross-Origin-Embedder-Policy`</a> headers delivered by the server, imposing any
restrictions it asserts. Likewise, user agents MUST also take into account the embedder policy
asserted by the document's opener or embedder, ensuring that they're properly imposed as well. To do
so, HTML is patched as follows:

1.  An <dfn>embedder policy</dfn> is defined as a [=string=] with one of the following values:
    "`none`", "`require-corp`".

2.  The [=/embedder policy=] is persisted on a number of objects:

    1.  {{Document}} objects are given an <dfn for="document">embedder policy</dfn> property, whose
        value is an [=/embedder policy=] defaulting to "`none`".

    2.  {{WorkerGlobalScope}} objects are given a <dfn for="WorkerGlobalScope">embedder
        policy</dfn> property, whose value is an [=/embedder policy=] defaulting to "`none`".

    3.  [=Environment settings objects=] are given a <dfn for="environment settings object">embedder
        policy</dfn> accessor, which has the following implementations:

        :   For {{Window}} objects:
        ::  Return the [=document/embedder policy=] of <var ignore>window</var>'s
            [=associated Document=].
        :   For {{WorkerGlobalScope}} objects:
        ::  Return <var ignore>worker global scope</var>'s [=WorkerGlobalScope/embedder policy=].

3.  The [$create a new browsing context$] algorithm sets the [=document/embedder policy=] for
    a browsing context's initial `about:blank` document by adding a new step directly after Referrer
    Policy is initialized in step 13 of the existing algorithm  which will copy any
    <var ignore>creator</var> document's policy:

        > 14.  If <var ignore>creator</var> is not null, set <var ignore>document</var>'s
        >      [=document/embedder policy=] to a copy of <var ignore>creator</var>'s
        >      [=document/embedder policy=].

4.  The [$initialize the Document object$] algorithm sets the [=document/embedder policy=] for
    {{Document}}s to which a [=browsing context=] is navigated by adding a new step directly after
    Referrer Policy is initialized in step 6:

    > 7.  Let <var ignore>document</var>'s [=document/embedder policy=] be the result of
    >     [$parse COEP header|obtaining an embedder policy$] from |response|.

    Note: We don't need to walk the new document's ancestor tree or inherit a policy here, as the
    check in #6 below will ensure that nested navigations are performed iff the declared policy in
    the nested navigation response is consistent with the embedder's policy.

5.  The [$run a worker$] algorithm sets the [=WorkerGlobalScope/embedder policy=] for
    {{WorkerGlobalScope}} objects by adding a new step directly after Referrer Policy is initialized
    in step 12.5:

    > 6.  Call [$initialize a global object's embedder policy from a response$] given
    >     <var ignore>worker global scope</var> and <var ignore>response</var>.

    Note: As above, we don't need to examine the worker's associated documents, as Fetch will ensure
    consistency between policies.

6.  The [$process a navigate response$] algorithm checks that documents nested in a `require-corp`
    context themselves positively assert `require-corp` by adding a new condition to the list in
    step 1:

    > *   The [$process navigation response|check a navigation response's adherence to its
    >     embedder's policy$] algorithm returns "`Blocked`" when executed upon
    >     <var ignore>response</var> and <var ignore>browsingContext</var>.


### Initializing a global object's Embedder policy ### {#COEP-initialize-embedder-policy-for-global}

<div algorithm="to initialize a global object's embedder policy from a response">
To <dfn abstract-op>initialize a global object's embedder policy from a response</dfn>, given a
[=global object=] (|global|) and a [=response=] (|response|):

1.  Let |policy| be "`none`".

2.  Let |response policy| be the result of [$parse COEP header|obtaining an embedder policy$] from
    |response|.

3.  Run the steps corresponding to the first matching statement:

    :   |response|'s [=response/url=]'s [=url/scheme=] is a [=local scheme=]
    :   |global| is a {{DedicatedWorkerGlobalScope}}:
    ::  1.  For each of the items in |global|'s [=WorkerGlobalScope/owner set=]:
    
            1.  If the item's [=/embedder policy=] is "`require-corp`", set |policy| to
                "`require-corp`".

    :   |global| is a {{SharedWorkerGlobalScope}}:
    :   |global| is a {{ServiceWorkerGlobalScope}}:
    ::  1.   Set |policy| to |response policy|.

4.  Set |global|'s [=WorkerGlobalScope/embedder policy=] to |policy|.

</div>

### Process a navigation response ### {#COEP-process-navigation-response}

<div algorithm="process a COEP navigation response">
If a document's [=document/embedder policy=] is "`require-corp`", then any document it embeds in a
[=nested browsing context=] must positively assert a "`require-corp`" [=/embedder policy=] (see
[[#cascade-vs-require]]).

To <dfn abstract-op lt="process navigation response">check a navigation response's adherence to its
embedder's policy</dfn> given a [=response=] (|response|), and a target [=browsing context=]
(|target|), execute the following steps, which will return "`Allowed`" or "`Blocked`" as
appropriate:

1.  Return "`Allowed`" if any of the following statements are true:

    *   |target| is not a [=nested browsing context=].
    *   The {{Document}} [=nested through|through which=] |target| is nested has an
        [=document/embedder policy=] of "`none`".
    *   The result of [$parse COEP header|obtaining an embedder policy$] from |response| is
        "`require-corp`".

2.  Return "`Blocked`".

</div>

Integration with Fetch {#COEP-integration-fetch}
-------------------------------------------

When fetching resources, user agents should examine both the [=request=]'s [=request/client=] and
[=request/reserved client=] to determine the applicable [=/embedder policy=], and apply any constraints that policy expresses
to incoming responses. To do so, Fetch is patched as follows:

1.  The `Cross-Origin-Resource-Policy` grammar is extended to include a "`cross-origin`" value.

2.  The [$cross-origin resource policy check$] is rewritten to take the [=/embedder policy=] into
    account, and to cover some [=navigation requests=] in addition to `no-cors` requests.

3.  ISSUE: The [$cross-origin resource policy check$] needs to be performed _after_ the relevant
    service worker has the opportunity to respond to a request, as it may otherwise be allowed to
    respond to a `require-corp` [=request/client=] with an opaque response which doesn't assert
    CORP.

### Cross-Origin Resource Policy Checks ### {#corp-check}

To perform a <dfn abstract-op>cross-origin resource policy check</dfn> given a [=request=]
(|request|) and a [=response=] (|response|), run these steps:

1.  Let |embedder policy| be "`require-corp`".

2.  Set |embedder policy| to "`none`" if both of the following statements are true:

    *    |request|'s [=request/client=]'s [=environment settings object/embedder policy=] is
         "`none`".
    *    |request|'s [=request/reserved client=] is not `null`, and its
         [=environment settings object/embedder policy=] is "`none`".


3.  Return `allowed` if any of the following statements are true:

    *    |request|'s [=request/mode=] is "`same-origin`", "`cors`", or "`websocket`".
    *    |request|'s [=request/mode=] is "`navigate`", and |embedder policy| is "`none`".

4.  ASSERT: |request|'s [=request/mode=] is "`no-cors`" or "`navigate`". If |request|'s
    [=request/mode=] is "`navigate`", |embedder policy| is "`require-corp`".

5.  Let |policy| be the result of [=header list/getting=] `Cross-Origin-Resource-Policy` from
    |response|'s [=response/header list=].

6.  If |policy| is `null`, and |embedder policy| is "`require-corp`", set |policy| to
    "`same-origin`".

7.  Switch on |policy| and run the associated steps:

    :   `null`
    :   `cross-origin`
    ::  Return `allowed`.

    :   `same-origin`
    ::  If |request|'s [=request/origin=] is [=same origin=] with |request|'s
        [=request/current URL=]'s [=url/origin=], then return `allowed`.

    :   `same-site`
    ::  If both of the following statements are true, then return `allowed`:
    
        *   |request|'s [=request/origin=]'s [=origin/host=] is [=same site=] with |request|'s
            [=request/current URL=]'s [=url/origin=]'s [=origin/host=].
        *   |request|'s [=request/origin=]'s [=origin/scheme=] is "`https`", or |response|'s
            [=response/HTTPS state=] is "`none`".

        Otherwise, return `blocked`.

        Note: `Cross-Origin-Resource-Policy: same-site` does not consider a response delivered
        via a secure transport to match a non-secure requesting origin, even if their hosts are
        otherwise [=same site=]. Securely-transported responses will only match a
        securely-transported initiator.

    :   Otherwise
    ::  Return `allowed`.

        ISSUE: Anne suggested that we ought to fail closed instead in the presence of COEP in
        [a comment on the relevant PR](https://github.com/whatwg/fetch/pull/893#discussion_r274867414).
        That seems reasonable to me, if we can get some changes into CORP along the lines of
        [whatwg/fetch#760](https://github.com/whatwg/fetch/issues/760), as they seem like useful
        extensions, and I think it'll be more difficult to ship them after inverting the
        error-handling behavior.


Opener Policy {#section-opener-policy}
=============

The Opener Policy portion of this proposal aims to ensure that a top-level document has control over
the [=browsing context group=] it occupies in relation to a document that caused it to be opened, or
to a document that it opens. In particular, it allows a document to assert that it refuses to join a
[=browsing context group=] that includes cross-origin documents.

The `Cross-Origin-Opener-Policy` HTTP Response Header {#COOP}
-------------------------------------------------------------

The <dfn http-header>`Cross-Origin-Opener-Policy`</dfn> HTTP response header field allows a
server to declare a cross-origin opener policy for a given document. It is a [=Structured Header=]
whose value MUST be a [=structured header/token=]. [[!I-D.ietf-httpbis-header-structure]] Its
ABNF is:

```
Cross-Origin-Opener-Policy = sh-token
```

There are currently three valid token values: "`same-origin`", "`unsafe-same-origin-allow-outgoing`" and "`unsafe-none`".

In order to support forward-compatibility with as-yet-unknown request types, user agents MUST ignore
this header if it contains an invalid value. Likewise, user agents MUST ignore this
header if the value cannot be parsed as a <a grammar>`sh-token`</a>.

### Parsing ### {#COOP-parsing}

<div algorithm="parsing the COOP header">
To <dfn abstract-op local-lt="parse COOP header">obtain a response's opener policy</dfn> given a
[=response=] (|response|):

1.  Let |policy| be an [=/opener policy=] whose value is `null`.

2.  Let |header| be the result of [=header list/getting=] `Cross-Origin-Opener-Policy` from
    |response|'s [=response/header list=].

3.  If |header| is not `null`:

    1.  Let |parsed policy| be the result of executing the [$Structured Header parsing algorithm$]
        with <var ignore>input_bytes</var> set to |header|, and <var ignore>header_type</var> set
        to "`item`".

        If parsing fails, return `null`.

    2.  Switch on |parsed policy|'s value:

        :   "`same-origin`"
        ::  1. Set |policy| to a [=struct=] whose [=opener policy/unsafe-allow-outgoing=] is false.
        :   "`unsafe-same-origin-allow-outgoing`"
        ::  1. Set |policy| to a [=struct=] whose [=opener policy/unsafe-allow-outgoing=] is true.
        :   "`unsafe-none`"
        ::  Return `null`.
        :   Otherwise
        ::  Return `null`.

4.  Return |policy|.

5. TODO(pmeuleman) do we include COEP in the COOP object as suggested in gist.github.com/annevk/6f2dd8c79c77123f39797f6bdac43f3e

<div class="note">
Note: This fails open (by defaulting to `null`) in the presence of a header that cannot be
parsed as an [=structured header/item=]. This includes inadvertant lists created by combining
multiple instances of the `Cross-Origin-Opener-Policy` header present in a given response:

<table class="data">
  <thead>
    <tr>
      <th>`Cross-Origin-Opener-Policy`</th>
      <th>Final Policy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>No header delivered</em></td>
      <td>`null`</td>
    </tr>
    <tr>
      <td>`same-origin`</td>
      <td>(false)</td>
    </tr>
    <tr>
      <td>`unsafe-same-origin-allow-outgoing`</td>
      <td>(true)</td>
    </tr>
    <tr>
      <td>`unsafe-none`</td>
      <td>`null`</td>
    </tr>
    <tr>
      <td>`unknown-value`</td>
      <td>`null`</td>
    </tr>
  </tbody>
</table>
</div>
</div>

### Matching cross-origin opener policies ### {#COOP-matching}

<div algorithm="Matching COOP">
To <dfn abstract-op local-lt="match COOP header">match opener policies</dfn>, given |policyA|, |originA|, |policyB|, and |originB|:

1.  If |policyA| is null and |policyB| is null, return true.

2.  If |policyA| or |policyB| is null, return false.

3.  If |policyA|'s [=opener policy/unsafe-allow-outgoing=] is |policyB|'s [=opener policy/unsafe-allow-outgoing=], and |originA| is same origin with |originB|, return true.

4. Return false.

5. TODO(pmeuleman) what about COEP? checked here or not?

</div>

Integration with HTML {#COOP-integration-html}
---------------------

When creating a top-level document, user agents will process
<a http-header>`Cross-Origin-Opener-Policy`</a> headers delivered by the server, imposing any
restrictions it asserts. Likewise, user agents MUST also take into account the opener policy
asserted by the document's opener, ensuring that they're properly imposed as well. To do
so, HTML is patched as follows:

1.  An <dfn>opener policy</dfn> is defined as either `null`, or a [=struct=] consisting of an <dfn for="opener policy">unsafe-allow-outgoing</dfn>
    [=/boolean=]. Unless otherwise specified, [=/opener policies=] are `null`.

2.  {{Document}} objects are given an <dfn for="document">opener policy</dfn> property, whose value
    is an [=/opener policy=] defaulting to `null`.

    ISSUE: It seems as though we can avoid giving either dedicated or shared workers an opener
    policy. We might, however, need to hold such a policy on service workers in order to deal with
    the capability exposed by {{Clients/openWindow()}}.

3.  The [$create a new browsing context$] algorithm sets the [=document/opener policy=] for
    a browsing context's initial `about:blank` document by adding a new step directly after Referrer
    Policy is initialized in step 13 of the existing algorithm  which will copy any
    <var ignore>creator</var> document's policy:

    > 14.  If <var ignore>creator</var> is not null, set <var ignore>document</var>'s
    >      [=document/opener policy=] to a copy of <var ignore>creator</var>'s
    >      [=document/opener policy=].

4.  The [$initialize the Document object$] algorithm sets the [=document/opener policy=] for
    {{Document}}s to which a [=browsing context=] is navigated by adding a new step directly after
    Referrer Policy is initialized in step 6:

    > 7.  Let <var ignore>document</var>'s [=document/opener policy=] be the result of calling
    >     [$initialize a document's opener policy from a response$] on <var ignore>document</var>
    >     and <var ignore>response</var>.

5.  The [$process a navigate response$] algorithm checks that documents nested in a `require-corp`
    context themselves positively assert `require-corp` by adding a new condition to the list in
    step 1:

    > *   The [$process navigation response|check a navigation response's adherence to its
    >     embedder's policy$] algorithm returns "`Blocked`" when executed upon
    >     <var ignore>response</var> and <var ignore>browsingContext</var>.

### Initializing a Document's opener policy ### {#initialize-coop}

<div algorithm="to initialize a document's opener policy from a response">
To <dfn abstract-op>initialize a document's opener policy from a response</dfn>, given a
{{Document}} (|document|) and a [=response=] (|response|):

1.  Let |policy| be the result of [$parse COOP header|obtaining a response's opener policy$] from
    |response|.

2.  If |document| 

</div>

### Process a navigation response ### {#COOP-navigating}

<div algorithm="Navigating COOP">
When <dfn abstract-op local-lt="navigate COOP header">navigating</dfn> from a document |doc| in a top-level browsing context |bc| to a response |response|

1.  Let |currentCOOP| be |doc|'s cross-origin opener policy.

2.  Let |currentOrigin| be |doc|'s origin.

3.  Let |potentialCOOP| be the result of obtaining a cross-origin opener policy from |response|.

4.  Let |potentialOrigin| be |response|'s URL's orgin. TODO(pmeuleman) CSP might make this opaque

5.  If |bc|'s popup sandboxing flag set is not empty and |potentialCOOP| is non-null, then navigate |bc| to a network error and abort these steps.

6.  If the result of [$Match COOP header|matching$] |currentCOOP|, |currentOrigin|, |potentialCOOP|, and |potentialOrigin| is false

    If |doc| is not the initial about:blank document or |currentCOOP|'s [=opener policy/unsafe-allow-outgoing=] is false or |potentialCOOP| is non-null:
    
        1.  Create a new browsing context group, move loading of |response| to a new top-level browsing context |newTLBC| in that browsing context group.

        2.  if |bc|'s popup sandboxing flag set is not empty:
        
            1.  Assert: |potentialCOOP| is null.

            2.  Set |newTLBC|'s popup sandboxing flag set to |bc|'s popup sandboxing flag set.

        3.  Discard |bc|. [Note: this does not close bc's browsing context group, except if it was the sole top-level browsing context in which case it could be collected.]

  7.  Otherwise, [do the normal thing]


</div>

Implementation Considerations {#impl-considerations}
====================================================

Why not require CORS instead of CORP? {#why-not-cors}
---------------------------------------------

An earlier version of the `Cross-Origin-Embedder-Policy` proposal leaned on CORS rather than CORP. Why
didn't we run with that model instead?

This proposal posits that there's a meaningful distinction between a server's assertions that "You,
vague acquaintance, may embed me." and "You, dearest friend, may read me."
`Cross-Origin-Resource-Policy` grants no explicit access to a resources' content, unlike CORS, and
seems like it's just good-enough to support the explicit declaration of embeddableness that this
proposal requires. CORS goes further, and especially in the short-term it seems that there's real
risk in developers blindly enabling CORS in order to meet the embedding requirements we want to
impose here, opening themselves up to direct attack in the process.

That is, it seems likely that some subset of developers would implement a CORS requirement in the
simplest way possible, by reflecting the `Origin` header in an `Access-Control-Allow-Origin` header.
If these resources contain interesting data about users (as advertisements, for example, are wont to
do), then it's possible that data will end up being more widely available than expected.

CORP does not create the same risk. It seems strictly lower-privilege than CORS, and a reasonable
place for us to start.

Forward-compatibility {#forward-compat}
---------------------------------------

The header defined in this document is small and single-purpose, which is a real advantage for
comprehensibility. I wonder, however, if an extensible alternative would be reasonable. For
example, if we're serious about moving to credentialless requests, it would be annoying to do so by
defining yet another header. Perhaps something more generic that accepts a
[=structured header/dictionary=] rather than a single token? That is:

```
Embedder-Policy: embedee-opt-in=required, embedee-credentials=cors-only
```

Perhaps it will be possible to do everything we want by defining a new tokens, but I worry a bit
that we'll follow [[Referrer-Policy]] into some pretty convoluted token names if we go that route.
Splitting out the axes along which we'd like to make decisions seems like it might be a good
strategy to consider.

Cascading vs. requiring embedder policies {#cascade-vs-require}
---------------------------------------------------------------

An earlier version of this proposal called for a nested document's [=document/embedder policy=] to
be inherited from its parent. This would ensure that a document that asserted `require-corp` would
require its framed children to do the same.

We decided that this is the wrong model to start with. Instead, we now require the framed document
itself to assert `Cross-Origin-Embedder-Policy: require-corp`, and block the load if it doesn't.
That seems safer, insofar as it would give the embedder less control over the embedee's state. It
also ensures that the embedee's developer would always see consistent behavior in the given document
no matter whether its loaded as a frame or as a top-level document.

This might be a requirement we can relax in the future, as it does have potential implications for
eventual deployment. It makes sense to begin with the requirement, however, as loosening constraints
is significantly simpler than imposing new constraints in the future.

Acknowledgements {#acknowledgements}
================

*   @annevk: https://gist.github.com/annevk/6f2dd8c79c77123f39797f6bdac43f3e
*   @arturjanc: https://docs.google.com/document/d/1zDlfvfTJ_9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k/edit
